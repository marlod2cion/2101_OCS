/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package optical_clinic;

import database_connector.DBKonek;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
public class Product extends javax.swing.JFrame {

    /**
     * Creates new form Product
     */
    private Connection kon;
    public Product() {
        initComponents();
        DBKonek db = new DBKonek();
        kon = db.getConnection();
        populateHomeTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        A6 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        A7 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        A8 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        A9 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        A10 = new javax.swing.JTextField();
        A2 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(21, 34, 56));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jPanel2.setBackground(new java.awt.Color(151, 213, 224));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Lucida Calligraphy", 1, 40)); // NOI18N
        jLabel8.setText("Product List and Inventory");

        jButton5.setBackground(new java.awt.Color(151, 213, 224));
        jButton5.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/house.png"))); // NOI18N
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5)
                .addGap(68, 68, 68)
                .addComponent(jLabel8)
                .addContainerGap(153, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(483, 483, 483))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton14.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jButton14.setText("LENS");
        jButton14.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jButton15.setText("FRAME");
        jButton15.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jButton16.setText("SOLUTION");
        jButton16.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1211, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel5);

        jButton7.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-remove-new.png"))); // NOI18N
        jButton7.setText("Delete");
        jButton7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-update-new.png"))); // NOI18N
        jButton6.setText("Update");
        jButton6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-logs-35.png"))); // NOI18N
        jButton8.setText("Logs");
        jButton8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        A6.setFont(new java.awt.Font("Lucida Sans", 1, 10)); // NOI18N
        A6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        A6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A6ActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Lucida Bright", 1, 10)); // NOI18N
        jLabel20.setText("Product ID");

        jLabel21.setFont(new java.awt.Font("Lucida Bright", 1, 10)); // NOI18N
        jLabel21.setText("Quantity");

        A7.setFont(new java.awt.Font("Lucida Sans", 1, 10)); // NOI18N
        A7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        A7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A7ActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Lucida Bright", 1, 10)); // NOI18N
        jLabel22.setText("Unit Price");

        A8.setFont(new java.awt.Font("Lucida Sans", 1, 10)); // NOI18N
        A8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        A8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A8ActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Lucida Bright", 1, 10)); // NOI18N
        jLabel23.setText("Sub Total");

        A9.setFont(new java.awt.Font("Lucida Sans", 1, 10)); // NOI18N
        A9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        A9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A9ActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Lucida Bright", 1, 10)); // NOI18N
        jLabel14.setText("PatientID");

        A10.setFont(new java.awt.Font("Lucida Sans", 1, 10)); // NOI18N
        A10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        A10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A10ActionPerformed(evt);
            }
        });

        A2.setFont(new java.awt.Font("Monospaced", 1, 10)); // NOI18N
        A2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-view-new.png"))); // NOI18N
        A2.setText("Order Product");
        A2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        A2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23)
                            .addComponent(jLabel14))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(A8, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                            .addComponent(A7)
                            .addComponent(A6)
                            .addComponent(A9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(A10, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(A2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(A10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(A6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(A7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(A8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(A9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(A2)
                .addGap(21, 21, 21))
        );

        jButton9.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jButton9.setText("PAYMENT");
        jButton9.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jButton11.setText("EXAMINATION");
        jButton11.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(253, 252, 232));
        jButton12.setFont(new java.awt.Font("Lucida Fax", 0, 24)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8-report-25.png"))); // NOI18N
        jButton12.setText("Orders");
        jButton12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        HomePage HP = new HomePage();
        HP.setVisible(true);
        HP.pack();
        HP.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        Lens LS = new Lens();
        LS.setVisible(true);
        LS.pack();
        LS.setLocationRelativeTo(null);
        dispose();

    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        Frame FR = new Frame();
        FR.setVisible(true);
        FR.pack();
        FR.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        Solution SL = new Solution();
        SL.setVisible(true);
        SL.pack();
        SL.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_jButton16ActionPerformed
    // Helper method to insert logs
    private void insertLog(int productID, String modifiedField, String oldValue, String newValue) {
        try {
            String insertLogQuery = """
                INSERT INTO Logs (productID, modifiedField, oldValue, newValue, modifiedAt) 
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
            """;
            PreparedStatement logStmt = kon.prepareStatement(insertLogQuery);
            logStmt.setInt(1, productID);
            logStmt.setString(2, modifiedField);
            logStmt.setString(3, oldValue);
            logStmt.setString(4, newValue);
            logStmt.executeUpdate();
            logStmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Failed to insert log: " + e.getMessage());
        }
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Refresh the table
        populateHomeTable();

        // Ask for the Product ID to update
        String productID = JOptionPane.showInputDialog("Enter the Product ID to update:");
        if (productID == null || productID.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Product ID is required!");
            return; // Exit if no product ID is entered
        }

        int productIDInt = Integer.parseInt(productID); // Convert productID to integer

        // Ask what to update (price, quantity, or both)
        String[] options = {"Price", "Quantity", "Both"};
        String choice = (String) JOptionPane.showInputDialog(
            null, 
            "What would you like to update?", 
            "Update Options", 
            JOptionPane.QUESTION_MESSAGE, 
            null, 
            options, 
            options[0]
        );

        if (choice == null) {
            JOptionPane.showMessageDialog(null, "Update canceled.");
            return; // Exit if no option is chosen
        }

        try {
            // Check the product type based on the entered productID
            String checkProductQuery = """
                SELECT p.productType, 
                       p.lensID AS productLensID, 
                       p.frameID AS productFrameID, 
                       p.solutionID AS productSolutionID,
                       COALESCE(l.lensPrice, f.framePrice, s.solutionPrice) AS currentPrice,
                       COALESCE(l.lensQuantity, f.frameQuantity, s.solutionQuantity) AS currentQuantity
                FROM Products p
                LEFT JOIN Lens l ON p.lensID = l.lensID
                LEFT JOIN Frames f ON p.frameID = f.frameID
                LEFT JOIN Solutions s ON p.solutionID = s.solutionID
                WHERE p.productID = ?
            """;

            PreparedStatement checkStmt = kon.prepareStatement(checkProductQuery);
            checkStmt.setInt(1, productIDInt);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                String productType = rs.getString("productType");

                // Prepare the update query dynamically
                String updateQuery = "";
                boolean updatePrice = choice.equals("Price") || choice.equals("Both");
                boolean updateQuantity = choice.equals("Quantity") || choice.equals("Both");

                if (productType.equals("Lens")) {
                    if (updatePrice && updateQuantity) {
                        updateQuery = "UPDATE Lens SET lensPrice = ?, lensQuantity = ? WHERE lensID = ?";
                    } else if (updatePrice) {
                        updateQuery = "UPDATE Lens SET lensPrice = ? WHERE lensID = ?";
                    } else if (updateQuantity) {
                        updateQuery = "UPDATE Lens SET lensQuantity = ? WHERE lensID = ?";
                    }
                } else if (productType.equals("Frame")) {
                    if (updatePrice && updateQuantity) {
                        updateQuery = "UPDATE Frames SET framePrice = ?, frameQuantity = ? WHERE frameID = ?";
                    } else if (updatePrice) {
                        updateQuery = "UPDATE Frames SET framePrice = ? WHERE frameID = ?";
                    } else if (updateQuantity) {
                        updateQuery = "UPDATE Frames SET frameQuantity = ? WHERE frameID = ?";
                    }
                } else if (productType.equals("Solution")) {
                    if (updatePrice && updateQuantity) {
                        updateQuery = "UPDATE Solutions SET solutionPrice = ?, solutionQuantity = ? WHERE solutionID = ?";
                    } else if (updatePrice) {
                        updateQuery = "UPDATE Solutions SET solutionPrice = ? WHERE solutionID = ?";
                    } else if (updateQuantity) {
                        updateQuery = "UPDATE Solutions SET solutionQuantity = ? WHERE solutionID = ?";
                    }
                }

                // Prepare and execute the update statement
                PreparedStatement updateStmt = kon.prepareStatement(updateQuery);

                int paramIndex = 1;
                double oldPrice = rs.getDouble("currentPrice");
                int oldQuantity = rs.getInt("currentQuantity");

                double newPrice = oldPrice;
                int newQuantity = oldQuantity;

                // Ask for price and/or quantity as needed
                if (updatePrice) {
                    String newPriceStr = JOptionPane.showInputDialog("Enter the new price for Product ID " + productIDInt + ":");
                    if (newPriceStr == null || newPriceStr.trim().equals("")) {
                        JOptionPane.showMessageDialog(null, "Price is required!");
                        return; // Exit if no price is entered
                    }
                    newPrice = Double.parseDouble(newPriceStr); // Convert new price to double
                    updateStmt.setDouble(paramIndex++, newPrice); // Set price parameter
                }

                if (updateQuantity) {
                    String newQuantityStr = JOptionPane.showInputDialog("Enter the new quantity for Product ID " + productIDInt + ":");
                    if (newQuantityStr == null || newQuantityStr.trim().equals("")) {
                        JOptionPane.showMessageDialog(null, "Quantity is required!");
                        return; // Exit if no quantity is entered
                    }
                    newQuantity = Integer.parseInt(newQuantityStr); // Convert new quantity to integer
                    updateStmt.setInt(paramIndex++, newQuantity); // Set quantity parameter
                }

                // Set the product ID for the WHERE clause
                if (productType.equals("Lens")) {
                    updateStmt.setInt(paramIndex, rs.getInt("productLensID"));
                } else if (productType.equals("Frame")) {
                    updateStmt.setInt(paramIndex, rs.getInt("productFrameID"));
                } else if (productType.equals("Solution")) {
                    updateStmt.setInt(paramIndex, rs.getInt("productSolutionID"));
                }

                // Execute the update
                int rowsAffected = updateStmt.executeUpdate();
                if (rowsAffected > 0) {
                    // Log changes into Logs table
                    if (updatePrice) {
                        insertLog(productIDInt, "Price", String.valueOf(oldPrice), String.valueOf(newPrice));
                    }
                    if (updateQuantity) {
                        insertLog(productIDInt, "Quantity", String.valueOf(oldQuantity), String.valueOf(newQuantity));
                    }

                    JOptionPane.showMessageDialog(null, "Product updated successfully for Product ID: " + productIDInt);
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to update the product.");
                }

                // Clean up
                updateStmt.close();
            } else {
                JOptionPane.showMessageDialog(null, "Product ID not found.");
            }

            rs.close();
            checkStmt.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid number format: " + e.getMessage());
        }

        // Refresh the table again
        populateHomeTable();


    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        populateHomeTable();
        String productID = JOptionPane.showInputDialog("Enter the Product ID to delete:");
        if (productID == null || productID.trim().equals("")) {
            JOptionPane.showMessageDialog(null, "Product ID is required!");
            return; // Exit if no Product ID is entered
        }

        int productIDInt = Integer.parseInt(productID); // Convert Product ID to integer

        try {
            // Check if the Product ID exists in the Products table
            String checkProductQuery = "SELECT productType, lensID, frameID, solutionID FROM Products WHERE productID = ?";
            PreparedStatement checkStmt = kon.prepareStatement(checkProductQuery);
            checkStmt.setInt(1, productIDInt);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                // Ask for confirmation before deleting
                int confirmation = JOptionPane.showConfirmDialog(
                    null,
                    "Are you sure you want to delete Product ID " + productIDInt + "?",
                    "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION
                );

                if (confirmation == JOptionPane.YES_OPTION) {
                    // Determine which table to delete from based on the product type
                    String productType = rs.getString("productType");
                    String deleteQuery = "";

                    if (productType.equals("Lens")) {
                        deleteQuery = "DELETE FROM Lens WHERE lensID = ?";
                    } else if (productType.equals("Frame")) {
                        deleteQuery = "DELETE FROM Frames WHERE frameID = ?";
                    } else if (productType.equals("Solution")) {
                        deleteQuery = "DELETE FROM Solutions WHERE solutionID = ?";
                    }

                    // Prepare and execute the delete query
                    PreparedStatement deleteStmt = kon.prepareStatement(deleteQuery);

                    if (productType.equals("Lens")) {
                        deleteStmt.setInt(1, rs.getInt("lensID"));
                    } else if (productType.equals("Frame")) {
                        deleteStmt.setInt(1, rs.getInt("frameID"));
                    } else if (productType.equals("Solution")) {
                        deleteStmt.setInt(1, rs.getInt("solutionID"));
                    }

                    int rowsAffected = deleteStmt.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(null, "Product ID " + productIDInt + " deleted successfully.");
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to delete Product ID " + productIDInt + ".");
                    }

                    // Clean up
                    deleteStmt.close();

                    // Also delete the record from the Products table
                    String deleteProductQuery = "DELETE FROM Products WHERE productID = ?";
                    PreparedStatement deleteProductStmt = kon.prepareStatement(deleteProductQuery);
                    deleteProductStmt.setInt(1, productIDInt);
                    deleteProductStmt.executeUpdate();
                    deleteProductStmt.close();
                } else {
                    JOptionPane.showMessageDialog(null, "Deletion cancelled.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Product ID not found.");
            }

            // Clean up
            rs.close();
            checkStmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }

        populateHomeTable();
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
         // TODO add your handling code here:
         loadLogs();

    }//GEN-LAST:event_jButton8ActionPerformed

    private void A2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A2ActionPerformed
        // TODO add your handling code here:
       String patientID = A10.getText().trim();
       String productID = A6.getText().trim();
       String quantityStr = A7.getText().trim();
       String priceStr = A8.getText().trim();
       String subtotalStr = A9.getText().trim();

       if (patientID.isEmpty() || productID.isEmpty() || quantityStr.isEmpty() || priceStr.isEmpty() || subtotalStr.isEmpty()) {
           JOptionPane.showMessageDialog(null, "Please fill in all fields.");
           return;
       }

       try {
           // Parse inputs to appropriate data types
           int quantity = Integer.parseInt(quantityStr);
           double price = Double.parseDouble(priceStr);
           double subtotal = Double.parseDouble(subtotalStr);

           String checkPatientQuery = "SELECT COUNT(*) FROM patients WHERE patientID = ?";
           String checkProductQuery = "SELECT COUNT(*) FROM products WHERE productID = ?";

           try (PreparedStatement checkPatientStmt = kon.prepareStatement(checkPatientQuery);
                PreparedStatement checkProductStmt = kon.prepareStatement(checkProductQuery)) {

               // Check if patientID exists
               checkPatientStmt.setInt(1, Integer.parseInt(patientID));
               ResultSet patientRS = checkPatientStmt.executeQuery();
               if (patientRS.next() && patientRS.getInt(1) == 0) {
                   JOptionPane.showMessageDialog(null, "Invalid patientID. Patient does not exist.");
                   return;
               }

               // Check if productID exists
               checkProductStmt.setInt(1, Integer.parseInt(productID));
               ResultSet productRS = checkProductStmt.executeQuery();
               if (productRS.next() && productRS.getInt(1) == 0) {
                   JOptionPane.showMessageDialog(null, "Invalid productID. Product does not exist.");
                   return;
               }
           }

           // Proceed with the insert if IDs are valid
           String insertQuery = "INSERT INTO addProducts (patientID, productID, quantity, unit_price, subtotal) VALUES (?, ?, ?, ?, ?)";
           kon.setAutoCommit(false); // Start transaction

           try (PreparedStatement insertStmt = kon.prepareStatement(insertQuery)) {
               insertStmt.setInt(1, Integer.parseInt(patientID));
               insertStmt.setInt(2, Integer.parseInt(productID));
               insertStmt.setInt(3, quantity);
               insertStmt.setDouble(4, price);
               insertStmt.setDouble(5, subtotal);

               insertStmt.executeUpdate();
               kon.commit(); // Commit transaction

               JOptionPane.showMessageDialog(null, "Product added successfully.");
           } catch (SQLException e) {
               kon.rollback(); // Rollback transaction in case of error
               JOptionPane.showMessageDialog(null, "Transaction failed: " + e.getMessage());
           } finally {
               kon.setAutoCommit(true); // Reset auto-commit
           }

       } catch (NumberFormatException e) {
           JOptionPane.showMessageDialog(null, "Invalid number format. Please check your inputs.");
       } catch (SQLException e) {
           JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage());
       }

    }//GEN-LAST:event_A2ActionPerformed

    
    private void A6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_A6ActionPerformed

    private void A7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_A7ActionPerformed

    private void A8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_A8ActionPerformed

    private void A9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A9ActionPerformed
        // TODO add your handling code here:
        calculateSubtotal();

    }//GEN-LAST:event_A9ActionPerformed

    private void A10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_A10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        Payments PY = new Payments();
        PY.setVisible(true);
        PY.pack();
        PY.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        Examination EX = new Examination();
        EX.setVisible(true);
        EX.pack();
        EX.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        Reports RP = new Reports();
        RP.setVisible(true);
        RP.pack();
        RP.setLocationRelativeTo(null);
        dispose();

    }//GEN-LAST:event_jButton12ActionPerformed
                                         
    private void populateHomeTable() {
        try {
            String query = "SELECT * FROM ProductView";
            Statement state = kon.createStatement();
            ResultSet rs = state.executeQuery(query);

            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Product ID");
            model.addColumn("Product Type");
            model.addColumn("Product Detail ID");
            model.addColumn("Product Detail Name");
            model.addColumn("Additional Detail");
            model.addColumn("Product Price");
            model.addColumn("Product Quantity");
            model.addColumn("Solution Expiration Date");
            model.addColumn("Product Category");

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("productID"),
                    rs.getString("productType"),
                    rs.getString("productDetailID"),
                    rs.getString("productDetailName"),
                    rs.getString("additionalDetail"),
                    rs.getDouble("productPrice"),
                    rs.getInt("productQuantity"),
                    rs.getDate("solutionExpirationDate"),
                    rs.getString("productCategory")
                });
            }
            jTable1.setModel(model);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(rootPane, "Error loading data: " + e.getMessage());
        }


    }
    private void loadLogs() {
        // Create the column names for the log table
        String[] columnNames = {"Log ID", "Product ID", "Modified Field", "Old Value", "New Value", "Modified At"};

        // Create a DefaultTableModel with the column names
        DefaultTableModel tableModel = new DefaultTableModel(null, columnNames);

        try {
            // Create the SQL query to get logs from the database
            String query = "SELECT logID, productID, modifiedField, oldValue, newValue, modifiedAt FROM Logs";

            // Prepare the statement and execute the query
            PreparedStatement stmt = kon.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Loop through the result set and add data to the table model
            while (rs.next()) {
                Object[] row = new Object[6];
                row[0] = rs.getInt("logID");
                row[1] = rs.getInt("productID");
                row[2] = rs.getString("modifiedField");
                row[3] = rs.getString("oldValue");
                row[4] = rs.getString("newValue");
                row[5] = rs.getTimestamp("modifiedAt");

                // Add the row to the table model
                tableModel.addRow(row);
            }

            // Set the table model to your JTable
            jTable1.setModel(tableModel);

            // Close resources
            rs.close();
            stmt.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error loading logs: " + e.getMessage());
        }
    }
    
    private void calculateSubtotal() {
                try {
                    // Get Quantity and Unit Price from the text fields
                    String quantityText = A7.getText();
                    String priceText = A8.getText();

                    if (!quantityText.isEmpty() && !priceText.isEmpty()) {
                        int quantity = Integer.parseInt(quantityText);  // Parse Quantity
                        double unitPrice = Double.parseDouble(priceText);  // Parse Unit Price

                        // Calculate Subtotal
                        double subtotal = quantity * unitPrice;

                        // Set Subtotal into the Subtotal text field (A9)
                        A9.setText(String.valueOf(subtotal));  // Display the result

                    } else {
                        A9.setText("");  // Clear Subtotal if fields are empty
                    }
                } catch (NumberFormatException ex) {
                    A9.setText("");  // Clear Subtotal in case of invalid input
                }
            }

    public void viewReceiptInTable() {
        // Step 1: Prepare the SQL query to retrieve all receipt details
       String viewAllReceiptsQuery = "SELECT * FROM receipt";

       try (PreparedStatement viewStmt = kon.prepareStatement(viewAllReceiptsQuery)) {
           // Execute the query
           ResultSet resultSet = viewStmt.executeQuery();

           // Step 2: Check if the resultSet has any data
           if (resultSet.next()) {
               // Step 3: Create a JTable model with the columns
               DefaultTableModel model = new DefaultTableModel();
               model.addColumn("Patient ID");
               model.addColumn("Payment Method");
               model.addColumn("Total Amount");
               model.addColumn("Given Amount");
               model.addColumn("Change Amount");

               // Step 4: Populate the JTable with data
               do {
                   Object[] row = new Object[5];
                   row[0] = resultSet.getInt("patientID"); // Patient ID
                   row[1] = resultSet.getString("paymentMethod"); // Payment Method
                   row[2] = resultSet.getDouble("totalAmount"); // Total Amount
                   row[3] = resultSet.getDouble("givenAmount"); // Given Amount
                   row[4] = resultSet.getDouble("changeAmount"); // Change Amount

                   model.addRow(row); // Add the row to the table model
               } while (resultSet.next());
               jTable1.setModel(model);


           } else {
               JOptionPane.showMessageDialog(null, "No receipts found.");
           }
       } catch (SQLException e) {
           e.printStackTrace();
           JOptionPane.showMessageDialog(null, "Error viewing receipts: " + e.getMessage());
       }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Product().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField A10;
    private javax.swing.JButton A2;
    private javax.swing.JTextField A6;
    private javax.swing.JTextField A7;
    private javax.swing.JTextField A8;
    private javax.swing.JTextField A9;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
